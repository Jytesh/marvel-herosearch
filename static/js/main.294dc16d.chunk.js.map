{"version":3,"sources":["api.js","Components/Character.js","index.js"],"names":["fetch","require","fetchCharacter","value","a","Promise","resp","rej","then","res","text","data","JSON","parse","catch","this","CharacterCarousel","props","children","map","x","i","console","log","slickConfig","dots","infinite","autoplay","variableWidth","className","React","Component","Character","thumb","urls","dat","forEach","url","push","alt","src","thumbnail","path","extension","name","description","Button","replace","type","href","Input","search","el","document","getElementById","state","input","marvelAPI","renderError","response","total","setState","charData","results","err","error","id","onClick","ReactDOM","render"],"mappings":"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","file":"static/js/main.294dc16d.chunk.js","sourcesContent":["const fetch = require('node-fetch')\n\nclass marvelAPI {\n    constructor() {\n        return this;\n    }\n    fetchCharacter = async(value) => {\n        return (this.fetch(`characters?nameStartsWith=${value}`))\n    }\n    fetch = async(value) => {\n        return new Promise((resp,rej) => {\n            fetch(`https://gateway.marvel.com:443/v1/public/${value}&apikey=837ec1513993ed3b2fe176cf44496148`, {\n                \"headers\": {\n                    \"accept\": \"application/json\",\n                    \"accept-language\": \"en-GB,en-US;q=0.9,en;q=0.8\",\n                    \"if-none-match\": \"e614cead3c695aa98627932bd5c4d430b19c2aa2\",\n                    \"sec-fetch-dest\": \"empty\",\n                    \"sec-fetch-mode\": \"cors\",\n                    \"sec-fetch-site\": \"same-site\",\n                    \"sec-gpc\": \"1\",\n                    \"origin\": \"https://developer.marvel.com\"\n                },\n                \"referrer\": \"https://developer.marvel.com/\",\n                \"referrerPolicy\": \"strict-origin-when-cross-origin\",\n                \"body\": null,\n                \"method\": \"GET\",\n                \"mode\": \"cors\",\n                \"credentials\": \"omit\"\n                })\n                .then(async (res) => {\n                    const text = await res.text()\n                    const data = JSON.parse(text);\n                    return resp(data)\n                }).catch(rej)\n        })\n    }\n}\n\nexport default (new marvelAPI());","import React from 'react';\nimport Slider from 'react-slick';\nimport 'slick-carousel/slick/slick.css';\nimport 'slick-carousel/slick/slick-theme.css';\nconst parseThumb = (thumb) => `${thumb.path}.${thumb.extension}`\n\nclass CharacterCarousel extends React.Component {\n  constructor(props) {\n    super(props);\n    this.children = props.data.map( (x,i) => <div><Character data={x}key={i}/></div>);\n    console.log(this.children)\n    this.slickConfig = {\n      dots: true,\n      infinite: true,\n      autoplay: true,\n      variableWidth: true,\n    };\n  }\n  render(){\n    return (\n      <div className=\"Carousel\">\n        <Slider {...this.slickConfig}>\n          {this.children}\n        </Slider>\n      </div>)\n  }\n}\nclass Character extends React.Component {\n    render() {\n      return (\n        <div className=\"character\">\n          <div className=\"characterContainer\">\n            {\n              (() => {\n                if (this.props.data.urls){\n                    let dat = []\n                    this.props.data.urls.forEach( (url,i) => {\n                      dat.push(<Button data={url} key={i}/>);\n                    })\n                    return <div>{dat}</div>;\n                  }\n                return ''\n                } \n              )()\n            }\n            <img alt=\"meme\" src= {parseThumb(this.props.data.thumbnail)}></img>\n            <h1> {this.props.data.name} </h1>\n            <p> {this.props.data.description} </p>\n          </div>\n        </div>\n      );\n    }\n  }\n//detail\n// wiki\n// comiclink\n//\nclass Button extends React.Component {\n  constructor(props){\n    super(props)\n    let replace = '';\n    switch (props.data.type) {\n      case 'detail': {\n        replace = 'Read Details';\n        break;\n      }\n      case 'wiki': {\n        replace = 'Read Wiki';\n        break;\n      }\n      case 'comiclink': {\n        replace = 'Read Comics';\n        break;\n      }\n      default: {\n        replace = 'Read'\n      }\n    };\n    this.data = props.data;\n    this.replace = replace;\n  }\n  render() {\n    if (this.data) return <div className=\"button\"><a href={this.data.url}><div className=\"innerFill \"><span>{this.replace}</span></div></a></div>;\n    else return <div></div>\n  }\n}\nexport default CharacterCarousel;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport marvelAPI from './api';\n\nimport CharacterCarousel from './Components/Character';\nclass Input extends React.Component {\n  constructor(){\n    super()\n    this.state = {\n      input: '',\n      charData: null\n    }\n  }\n  search  = async() => {\n    console.log('meme')\n    const el = document.getElementById('heroQuery');\n    this.state.input = el;\n    const response = await marvelAPI.fetchCharacter(el.value).catch(this.renderError);\n    if (response.data.total) {\n      this.setState({ charData: response.data.results})\n    } else {\n      this.renderError('No character found!') \n    }\n  }\n  render() {\n    if (!this.state.input) \n    return (\n      <div id=\"mainInput\">\n        <div>\n          <input type=\"text\" id=\"heroQuery\"></input>\n          <button id=\"Search\" onClick={this.search}>Search</button>\n        </div>\n      </div>\n      )\n    else if (this.state.charData) {\n      return <CharacterCarousel data={this.state.charData}/>\n    }\n  }\n  renderError = async(err) => {\n    console.error(err)\n  }\n}\nReactDOM.render(<Input />, document.getElementById('root'));"],"sourceRoot":""}